---

- name: Update cloudflare_dns script settings
  hosts: "{{ ansible_limit | default(omit) }}"
  gather_facts: false
  module_defaults:
    group/community.routeros.api:
      hostname: "{{ mikrotik_host_name | default(inventory_hostname) }}"
      password: "{{ mikrotik_api_password }}"
      username: "{{ ansible_user }}"
      tls: "{{ mikrotik_use_tls | default(true) }}"
      validate_certs: "{{ mikrotik_use_tls | default(true) }}"
      validate_cert_hostname: "{{ mikrotik_use_tls | default(true) }}"
  tasks:

    - name: Get settings script object
      community.routeros.api:
        path: system script
        query: ".id name source WHERE name == cloudflare_dns_settings"
      register: __ms_settings_script

    # Installation playbook creates example script placeholder, so absence of the
    # script means setup hasn't been run on the target
    - name: Check if settings script is present
      ansible.builtin.assert:
        that:
          - __ms_settings_script.msg[0].name is defined
        quiet: true
        fail_msg: cloudflare_dns_settings script is missing. Refer to cloudflare_dns/README.md for installation instructions.

    - name: Generate settings script
      ansible.builtin.set_fact:
        _ms_settings_script_content: |-
          # Generated by Ansible. Any changes made here will be overwritten

          # Mandatory parameters
          :global cfdnsAPIAuthEmail "{{ mt_cloudflare_api_email }}"
          :global cfdnsAPIAuthKey   "{{ mt_cloudflare_api_token }}"
          :global cfdnsMappings {
          {% for dns_mapping in mt_cloudflare_dns %}
            {
              interface="{{ dns_mapping.interface }}"
              records={
          {% for dns_record in dns_mapping.records %}
                {name="{{ dns_record.name }}"; zoneid="{{ dns_record.zoneid }}"; recordid="{{ dns_record.recordid }}"; ttl={{ dns_record.ttl }}}{% if not loop.last %};{% endif +%}
          {% endfor %}
              }
            }{% if not loop.last %};{% endif +%}
          {% endfor %}
          }

          # Optional parameters
          # :global cfdnsForcedCheckInterval [:totime "15m"]

    - name: Set settings script content
      community.routeros.api_find_and_modify:
        path: system script
        find:
          name: cloudflare_dns_settings
        values:
          source: "{{ _ms_settings_script_content }}"
      when: __ms_settings_script.msg[0].source != _ms_settings_script_content
